clear;clc
%% Simulación de datos
N=1000;
b0 = 1;
b1 = 2;
b2 = 5;

a0 = -4;
a1 = [0.1,0.5,1,5,10];
a2 = 3;


rng(1);
v = rand(N,1);
u = randn(N,1);
e = randn(N,1);
W = normrnd(2,1,N,1);

Z = zeros(N,1);
for i = 1:N
    if v(i) < 0.8
        Z(i) = 1;
    else
        Z(i) = 0;
    end
    if i == N
        clear i;
    end
end

X = zeros(N,5);
Y = cell(1,5);
for i = 1:5
    X(:,i) = a0 + a1(i) * Z + a2 * W + u;
    Y{i} = b0 + b1 * X(:,i) + b2 * W + e;
    if i == 5
       clear i ;
    end
end

o = ones(N,1); % creamos un vector con las X + constante en cada caso
x = cell(1,5);
for i = 1:5
    xi = [o,X(:,i)];
    x{i} = xi;

    if i == 5
        clear xi i o X;
    end
end

data1 = {x, Y, Z, W}; 
data1(2,:)={'x','Y','Z','W'};

%% 1 MCO

B = zeros(2,5);
for i = 1:5
    xi = x{i};
    xy = xi' * Y{i};
    B(:,i) = ( xi' * xi ) \ xy;
    if i == 5
        clear i xi xy;
    end
end


% Errores homocedásticos
s2 = zeros(5,1);
Errores_h = zeros(2,5);
for i = 1:5
    xi = x{i};
    res = Y{i} - xi * B(:,i);
    s2(i) = (res' * res) / (N-1);

    Errores_h(:,i) = sqrt( diag( s2(i) * inv(xi' * xi) ) ); % Homo

    if i == 5
        clear i s2 res xi;
    end

end

Errores_r = zeros(2,5);
adj = N/(N-1);
for i = 1:5
    xi = x{i};
    res = Y{i} - xi * B(:,i);
    vi = (xi' * xi) \ xi' * diag(res.^2) * xi / (xi' * xi);
    Errores_r(:,i) = sqrt(diag(adj * vi));

    if i == 5
        clear i xi res vi adj;
    end

end


% Tablas
row = ["Constante", "\beta_1"]; 
col = ["(1)", "(2)", "(3)", "(4)", "(5)"];
Errores_h = array2table(Errores_h, "RowNames", row, "VariableNames", col);
Errores_r = array2table(Errores_r, "RowNames", row, "VariableNames", col);

clear row col;

%% Monte Carlo

clearvars -except a0 a1 a2 b0 b1 b2 N data1; clc
mco = zeros(N,5);
o = ones(N,1);

rng(2)

for s = 1:N
    v = rand(N,1);
    u = randn(N,1);
    e = randn(N,1);
    W = normrnd(2,1,N,1);

    Z = zeros(N,1);
    for i = 1:N
        if v(i) < 0.8
            Z(i) = 1;
        else
            Z(i) = 0;
        end
        if i == N
            clear i;
        end
    end

    X = zeros(N,5);
    Y = cell(1,5);
    for i = 1:5
        X(:,i) = a0 + a1(i) * Z + a2 * W + u;
        Y{i} = b0 + b1 * X(:,i) + b2 * W + e;
        if i == 5
            clear i ;
        end
    end
    x = cell(1,5);
    for i = 1:5
        xi = [o,X(:,i)];
        x{i} = xi;

        if i == 5
            clear xi i X;
        end
    end

    B = zeros(2,5);
    for i = 1:5
        xi = x{i};
        xy = xi' * Y{i};
        B(:,i) = ( xi' * xi ) \ xy;
        if i == 5
            clear i xi xy;
        end
    end

    mco(s,:) = B(2,:);
    if s == N
        clear o s u v W x Y Z;
    end
end


hold on; 
for i = 1:3
    [f, x] = ksdensity(mco(:,i));
    plot(x, f,'LineWidth',2);
end
hold off;

xlabel('$\hat{\beta}_{1}^{MCO}$', 'Interpreter', 'latex');

ylabel('Densidad','Interpreter', 'latex');
title('Kernel Estimador MCO', 'Interpreter', 'latex');
legend('$\alpha_1$', '$\alpha_2$', '$\alpha_3$', ...
    'Interpreter', 'latex');


hold on; 
for i = 4:5
    [f, xi] = ksdensity(mco(:,i));
    plot(xi, f,'LineWidth',2);
end
hold off;

xlabel('$\hat{\beta}_{1}^{MCO}$', 'Interpreter', 'latex');
ylabel('Densidad','Interpreter', 'latex');
title('Kernel Estimador MCO', 'Interpreter', 'latex');
legend('$\alpha_4$', '$\alpha_5$', ...
    'Interpreter', 'latex');

%% MC2E
clearvars -except data1 N;

% Recuperamos las variables de la simulación inicial
o = ones(N,1) ;
Z = [o,data1{1,3}];
Y = data1{1,2};
X = data1{1,1};
iv = zeros(2,5); % vector donde guardamos estimaciones por IV
F = zeros(2,5);
Errores_h = zeros(2,5);
Errores_r = zeros(2,5);
adj = N/(N-1);

for i = 1:5
    % elegimos las variables de la iteración i
    x = X{i};
    x = x(:,2); % eliminamos la columna de 1s
    y = Y{i};

    % Primera Etapa de i
    % Xi = gamma0 + gammaZi + vi

    g = (Z' * Z) \ Z' * x;

    % Estimación de xi (x estimado en iteración i)
    xi = Z * g;

    % Test F iteración i
    rxi = x - xi;
    s2xi = (rxi' * rxi) /(N-1);
    R = [0 1]';
    Fi = (R' * g) * inv( s2xi * R' * inv(Z' * Z) * R ) * (R' * g);

    F(1,i) = Fi;

    % F robusto
    D = diag(rxi.^2);
    vxi = (Z' * Z) \ Z' * D * Z / (Z' * Z);
    Fir = (R' * g) * inv( R' * vxi * R ) * (R' * g);
    F(2,i) = Fir;

    % Segunda etapa iteración i

    xi = [o,xi]; % agregamos la constante

    Biv = (xi' * xi) \ xi' * y;

    iv(:,i) = Biv; % guardamos la estimación i


    % Errores Homocedásticos
    m = eye(N) - xi * inv(xi' * xi) * xi';
    res = m * y;
    s2 = (res' * res) / (N-1);
    Errores_h(:,i) = sqrt( diag( s2 * inv(xi' * xi) ) );

    % Errores robustos
    vi = (xi' * xi) \ (xi' * diag(res.^2) * xi) / (xi' * xi);
    Errores_r(:,i) = sqrt(diag(adj * vi));
end

clearvars -except iv F Errores_h Errores_r data1;


%% Simulación MC2E

N=10000;
b0 = 1;
b1 = 2;
b2 = 5;
a0 = -4;
a1 = [0.1,0.5,1,5,10];
a2 = 3;

MC2E = zeros(N,5);
o = ones(N,1);

rng(3)

for s = 1:N
    % Simulación s 

    v = rand(N,1);
    u = randn(N,1);
    e = randn(N,1);
    W = normrnd(2,1,N,1);

    Z = zeros(N,1);
    for i = 1:N
        if v(i) < 0.8
            Z(i) = 1;
        else
            Z(i) = 0;
        end
        if i == N
            clear i;
        end
    end

    X = zeros(N,5);
    Y = cell(1,5);
    for i = 1:5
        X(:,i) = a0 + a1(i) * Z + a2 * W + u;
        Y{i} = b0 + b1 * X(:,i) + b2 * W + e;
        if i == 5
            clear i ;
        end
    end
    x = cell(1,5);
    for i = 1:5
        xi = [o ,X(:,i)];
        x{i} = xi;

        if i == 5
            clear xi i X;
        end
    end

    Z =[o ,Z];
    % MC2E
    for i =1:5
        % Primera etapa
        xi = x{i};
        xi = xi(:,2);
        g = (Z' * Z) \ Z' * xi;
        xiz = Z * g;

        % segunda etapa
        xiv = [o,xiz];
        xx = xiv' * xiv;
        xy = xiv' * Y{i};
        Biv(:,i) = xx \ xy;
        if i == 5
            clear i xiv xx xy;
        end

    end

    MC2E(s,:) = Biv(2,:);
    if s == N
        clear o s u v W x Y Z;
    end
end


hold on; 
for i = 1:3
    [f, x] = ksdensity(MC2E(:,i));
    plot(x, f,'LineWidth',2);
end
hold off;

xlabel('$\hat{\beta}_{1}^{MCO}$', 'Interpreter', 'latex');

ylabel('Densidad','Interpreter', 'latex');
title('Kernel Estimador MCO', 'Interpreter', 'latex');
legend('$\alpha_1$', '$\alpha_2$', '$\alpha_3$', ...
    'Interpreter', 'latex');


hold on; 
for i = 4:5
    [f, xi] = ksdensity(MC2E(:,i));
    plot(xi, f,'LineWidth',2);
end
hold off;

xlabel('$\hat{\beta}_{1}^{MCO}$', 'Interpreter', 'latex');
ylabel('Densidad','Interpreter', 'latex');
title('Kernel Estimador MCO', 'Interpreter', 'latex');
legend('$\alpha_4$', '$\alpha_5$', ...
    'Interpreter', 'latex');



